<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title><%- Title %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">

    <script><%- tarjs %></script>
    <script><%- highlightsjs %></script>
    <script><%- notiejs %></script>
    <style><%- notiecss %></style>
    <style><%- highlightscss %></style>
    <style><%- basiclightboxcss %></style>
    <script>
let ScrollSpy = class {
    constructor(selector, classlist) {
        this.selector = document.querySelectorAll(selector);
        const options = {
            root: null,
            rootMargin: `0px`,
            threshold: 0
        };
        const observer = new IntersectionObserver(this.doWhenIntersect.bind(this), options);
        this.classlist = classlist;

        this.previousMapping = new Map();
        let lastEle;
        this.mapping = new Map();
        [...this.selector].forEach((tarEle) => {
            if (!tarEle.id) {
                return;
            }
            let targetEles = document.querySelectorAll(`a[href="#${tarEle.id}"]`);
            if (!targetEles || targetEles.length == 0) {
                return;
            }
            this.mapping.set(tarEle.id, [...targetEles]);
            observer.observe(tarEle);

            if (lastEle) {
                this.previousMapping.set(tarEle.id, lastEle);
            }
            lastEle = tarEle;
        });
    }

    doWhenIntersect(entries) {
        
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                let clientRect = entry.target.getBoundingClientRect();
                let tarEles;
                if (clientRect.top > window.innerHeight) {
                    tarEles = this.previousMapping.get(entry.target.id);
                } else {
                    tarEles = this.mapping.get(entry.target.id);
                }
                if (this.lastEle === entry.target) {
                    return;
                }
                if (this.lastEle) {
                    this.mapping.get(this.lastEle.id).forEach((tarEle) => {
                        tarEle.classList.remove(...this.classlist);
                    });
                }
                tarEles.forEach((tarEle) => {
                    tarEle.classList.add(...this.classlist);
                });
                this.lastEle = entry.target;
            }
        });
    }
};

        window.addEventListener('DOMContentLoaded', (event) => {

            hljs.highlightAll();

            //create menu
            let ul = document.createElement('ul');
            let nestedUl;
            document.querySelectorAll("main h1, main h2").forEach((tarheading,index) => {
                tarheading.id = `${tarheading.tagName}-${index}`;
                let li = document.createElement('li');
                li.classList.add("pt-1")
                let a = document.createElement('a');
                a.innerText = tarheading.innerText;
                a.href =`#${tarheading.id}`;
                li.appendChild(a);

                if('H1' == tarheading.tagName){
                    ul.appendChild(li);

                }else if('H2' == tarheading.tagName){
                    if(ul.lastChild && ul.lastChild.lastChild.tagName == 'UL'){
                        ul.lastChild.lastChild.appendChild(li);
                    }else{
                        let nestedUl = document.createElement('ul');
                        nestedUl.classList.add("pl-4");
                        ul.lastChild.appendChild(nestedUl);
                        nestedUl.appendChild(li);
                    }
                }
            });
            document.getElementById("scrollspy").innerHTML = ul.innerHTML;
            document.getElementById("scrollspy2").innerHTML = ul.innerHTML;
            

            //scroll spy
            new ScrollSpy("main h1, main h2", [ "underline", "font-bold"]);

            document.querySelectorAll('pre').forEach((tarPre) => {
                let copyButton = document.createElement("button");
                copyButton.className = 'copy';
                copyButton.innerHTML = 'copy';
                copyButton.addEventListener('click', (event) => {
                    let tarText = copyButton.parentNode.querySelector('code').innerText;
                    execCopy(tarText);
                    notie.alert({ text: 'copied' });
                });
                tarPre.insertBefore(copyButton, tarPre.firstChild);
            });
        });

        function execCopy(string) {
            // 空div 生成
            var tmp = document.createElement("div");
            // 選択用のタグ生成
            var pre = document.createElement('pre');

            // 親要素のCSSで user-select: none だとコピーできないので書き換える
            pre.style.webkitUserSelect = 'auto';
            pre.style.userSelect = 'auto';
            tmp.appendChild(pre).textContent = string;

            // 要素を画面外へ
            var s = tmp.style;
            s.position = 'fixed';
            s.right = '200%';

            // body に追加
            document.body.appendChild(tmp);
            // 要素を選択
            document.getSelection().selectAllChildren(tmp);

            // クリップボードにコピー
            var result = document.execCommand("copy");
            // 要素削除
            document.body.removeChild(tmp);

            return result;
        }

        function toggle(target) {
            target.classList.toggle("scale-100");
            target.classList.toggle("opacity-100");
        }
    </script>
    <style>
    html {
            scroll-behavior: smooth;
    }

    main{
        counter-reset: section;
    }

    main h1::before {
        counter-increment: section;
        content: counter(section) ". ";
    }

    ul#scrollspy{
        counter-reset: scroll-section;

    }
    
    ul#scrollspy > li::before {
        counter-increment: scroll-section;
        content: counter(scroll-section) ". ";
    }

    ul#scrollspy2{
        counter-reset: scroll-section2;
    }

    ul#scrollspy2 > li::before {
        counter-increment: scroll-section2;
        content: counter(scroll-section2) ". ";
    }
    </style>
</head>

<body class="gallery">

    <div class="flex mx-auto w-5/6">
        <div class="fixed top-0 left-4 md:hidden block  
            text-pink-600 bg-pink-300 p-3 text-center inline-flex items-center justify-center w-16 h-16 mb-6 shadow-lg rounded-full mt-8"
            onclick="toggle(document.querySelector('#modal'))">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                class="feather feather-grid">
                <rect x="3" y="3" width="7" height="7"></rect>
                <rect x="14" y="3" width="7" height="7"></rect>
                <rect x="14" y="14" width="7" height="7"></rect>
                <rect x="3" y="14" width="7" height="7"></rect>
            </svg>
        </div>
        <aside class="h-full sticky top-0 w-64 pt-8 hidden md:block ">
            <header class="inline no-underline border-0	text-2xl	">
                <%- Title %>
            </header>
            <dl class="text-sm	pt-2">
                <dt class="inline-block ">初回:</dt>
                <dd class="inline-block text-gray-400"><% if (locals.CreateDate) { %><%- CreateDate %><% } %></dd>
                <br>
                <dt class="inline-block ">更新:</dt>
                <dd class="inline-block text-gray-400"><% if (locals.UpdateDate) { %><%- locals.UpdateDate %><% } %></dd>
            </dl>
            <ul id="scrollspy" class="text-sm pt-8">
                <li class="pt-2">
                    <a href="#h1-1">gradle dependencies</a>
                </li>
                <li class="pt-2">
                    <a href="#h1-2">さくっと実装してみよう</a>
                    <ul class="pl-4">
                        <li class="pt-2"><a href="#h2-1">Componentのクラスを作る</a></li>
                        <li class="pt-2"><a href="#h2-2">Aspectのクラスを作る</a></li>
                    </ul>
                </li>
                <li class="pt-2">
                    <a href="#h1-3">Mainクラスを作って実行</a>
                </li>
            </ul>
        </aside>
        <main class="pl-16 pb-80 flex-1 overflow-auto">
            <%- content %>
        </main>
    </div>

    <div id="modal"
        class="w-full fixed top-0 left-0 flex justify-center  transition-all	duration-300 ease-linear opacity-0 transform  scale-0">
        <div class="h-screen w-full fixed top-0 left-0 bg-gray-200 opacity-70 "
            onclick="toggle(document.querySelector('#modal'))"></div>
        <div class="bg-white rounded shadow p-4 m-4 max-w-xs overflow-y-auto opacity-100 z-10"
            onclick="event.stopPropagation();">
            <ul class="text-sm pt-8" id="scrollspy2">
                <li class="pt-2">
                    <a href="#h1-1">gradle dependencies</a>
                </li>
                <li class="pt-2">
                    <a href="#h1-2">さくっと実装してみよう</a>
                    <ul class="pl-4">
                        <li class="pt-2"><a href="#h2-1">Componentのクラスを作る</a></li>
                        <li class="pt-2"><a href="#h2-2">Aspectのクラスを作る</a></li>
                    </ul>
                </li>
                <li class="pt-2">
                    <a href="#h1-3">Mainクラスを作って実行</a>
                </li>
            </ul>
        </div>
    </div>

    <script><%- basiclightboxjs %></script>

</body>

</html>